from flask import Flask, request, render_template, redirect, url_for, send_file
import os
from werkzeug.utils import secure_filename
from pymongo import MongoClient
from bson.objectid import ObjectId
import requests
import config

app = Flask(name)
os.makedirs(config.UPLOAD_FOLDER, exist_ok=True)

# MongoDB
client = MongoClient(config.MONGO_URI)
db = client["telegram_cloud"]
files_col = db["files"]

# Telegram API
BASE_URL = f"https://api.telegram.org/bot{config.BOT_TOKEN}"

@app.route("/", methods=["GET", "POST"])
def index():
    if request.method == "POST":
        action = request.form.get("action")

        # --- Upload File ---
        if action == "upload":
            if "file" not in request.files:
                return "No file uploaded"

            file = request.files["file"]
            if file.filename == "":
                return "No selected file"

            filename = secure_filename(file.filename)
            file_path = os.path.join(config.UPLOAD_FOLDER, filename)
            file.save(file_path)

            # Upload to Telegram channel
            with open(file_path, "rb") as f:
                r = requests.post(
                    f"{BASE_URL}/sendDocument",
                    data={"chat_id": config.CHANNEL_ID},
                    files={"document": f}
                ).json()

            if "result" not in r:
                return "Telegram upload failed!"

            file_id = r["result"]["document"]["file_id"]

            # Save to MongoDB
            file_doc = {"name": filename, "file_id": file_id}
            result = files_col.insert_one(file_doc)
            db_id = str(result.inserted_id)

            return redirect(url_for("file_page", fid=db_id))

        # --- Get File ---
        elif action == "getfile":
            file_id_input = request.form.get("file_id")
            try:
                file_doc = files_col.find_one({"_id": ObjectId(file_id_input)})
            except:
                return "Invalid File ID"

            if not file_doc:
                return "File not found"

            return redirect(url_for("file_page", fid=file_id_input))

    return render_template("index.html")

@app.route("/file/<fid>")
def file_page(fid):
    try:
        file_doc = files_col.find_one({"_id": ObjectId(fid)})
    except:
        return "Invalid File ID"

    if not file_doc:
        return "File not found"

    return render_template(
        "file.html",
        file_name=file_doc["name"],
        file_id=fid,
        tg_file_id=file_doc["file_id"]
    )

@app.route("/download/<fid>")
def download(fid):
    try:
        file_doc = files_col.find_one({"_id": ObjectId(fid)})
    except:
        return "Invalid File ID"

    if not file_doc:
        return "File not found"

    tg_file_id = file_doc["file_id"]

    # Get Telegram file download link
    file_info = requests.get(f"{BASE_URL}/getFile?file_id={tg_file_id}").json()
    if "result" not in file_info:
        return "Error fetching file"

    file_path = file_info["result"]["file_path"]
    file_url = f"https://api.telegram.org/file/bot{config.BOT_TOKEN}/{file_path}"

    return redirect(file_url)

if name == "main":
    app.run(debug=True)